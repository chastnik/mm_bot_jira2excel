from mattermostdriver import Driver
import asyncio
import logging
import json
import re
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from config import Config
from jira_client import JiraClient
from excel_generator import ExcelGenerator

logger = logging.getLogger(__name__)

class MattermostBot:
    """–ë–æ—Ç –¥–ª—è Mattermost —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Jira"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.driver = Driver({
            'url': Config.MATTERMOST_URL,
            'token': Config.MATTERMOST_TOKEN,
            'scheme': 'https',
            'port': 443,
            'basepath': '/api/v4'
        })
        
        self.jira_client = JiraClient()
        self.excel_generator = ExcelGenerator()
        self.user_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.sessions_file = 'user_sessions.json'  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost"""
        try:
            self.driver.login()
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Mattermost")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            self.bot_user = self.driver.users.get_user_by_username(Config.BOT_NAME)
            if not self.bot_user:
                self.bot_user = self.driver.users.get_user('me')
            
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: {self.bot_user['username']}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self._load_user_sessions()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö DM –∫–∞–Ω–∞–ª–æ–≤
            await self._verify_dm_channels()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost: {e}")
            raise
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ WebSocket
            for response in self.driver.init_websocket(event_handler=self.handle_event):
                pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
    
    async def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Mattermost"""
        try:
            event_type = event.get('event')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö DM –∫–∞–Ω–∞–ª–æ–≤
            if event_type == 'channel_created':
                await self._handle_channel_created(event)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            elif event_type == 'posted':
                post = json.loads(event['data']['post'])
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
                if post.get('user_id') == self.bot_user['id']:
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
                message = post.get('message', '').strip()
                channel_id = post.get('channel_id')
                user_id = post.get('user_id')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self._is_direct_message(channel_id):
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                    await self.handle_message(message, channel_id, user_id)
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –∫–∞–Ω–∞–ª–∞—Ö
                    logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª—ã (–≤–∫–ª—é—á–∞—è DM)
            elif event_type == 'user_added':
                await self._handle_user_added(event)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            
    async def _handle_channel_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_data = json.loads(event.get('data', '{}'))
            channel = channel_data.get('channel', {})
            
            if channel.get('type') == 'D':  # Direct message
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π DM –∫–∞–Ω–∞–ª: {channel.get('id')}")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def _handle_user_added(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            broadcast = event.get('broadcast', {})
            channel_id = broadcast.get('channel_id')
            user_id = event['data'].get('user_id')
            
            if channel_id and self._is_direct_message(channel_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ DM –∫–∞–Ω–∞–ª {channel_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    

    
    def _is_direct_message(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            channel = self.driver.channels.get_channel(channel_id)
            is_dm = channel.get('type') == 'D'
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if is_dm:
                logger.debug(f"–ö–∞–Ω–∞–ª {channel_id} —è–≤–ª—è–µ—Ç—Å—è DM –∫–∞–Ω–∞–ª–æ–º")
            else:
                logger.debug(f"–ö–∞–Ω–∞–ª {channel_id} –ù–ï —è–≤–ª—è–µ—Ç—Å—è DM –∫–∞–Ω–∞–ª–æ–º (—Ç–∏–ø: {channel.get('type')})")
                
            return is_dm
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False
    
    async def handle_message(self, message: str, channel_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message = message.lower().strip()
            
            # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            if any(cmd in message for cmd in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']):
                await self.send_help(channel_id)
            
            elif any(cmd in message for cmd in ['–ø—Ä–æ–µ–∫—Ç—ã', '—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤']):
                await self.send_projects_list(channel_id)
            
            elif '–æ—Ç—á–µ—Ç' in message or '—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã' in message:
                await self.start_report_generation(channel_id, user_id)
            
            elif user_id in self.user_sessions:
                await self.handle_session_input(message, channel_id, user_id)
            
            else:
                await self.send_unknown_command(channel_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_error_message(channel_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def send_help(self, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
**–ë–æ—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∏–∑ Jira** üìä

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `–ø—Ä–æ–µ–∫—Ç—ã` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ `–æ—Ç—á–µ—Ç` –∏–ª–∏ `—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã` - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º
‚Ä¢ `–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:**
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ—Ç—á–µ—Ç`
2. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:
   ‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç: `PROJ`
   ‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: `PROJ1, PROJ2, PROJ3`
3. –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É)
4. –ü–æ–ª—É—á–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º–∏

**–§–æ—Ä–º–∞—Ç –¥–∞—Ç:** YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15)

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –¥–∞—Ç–µ –∏ –≤–∫–ª—é—á–∞—é—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        """
        await self.send_message(channel_id, help_text)
    
    async def send_projects_list(self, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            projects = self.jira_client.get_projects()
            
            if not projects:
                await self.send_message(channel_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
                return
            
            projects_text = "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
            for project in projects[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–æ–µ–∫—Ç–æ–≤
                projects_text += f"‚Ä¢ `{project['key']}` - {project['name']}\n"
            
            if len(projects) > 20:
                projects_text += f"\n... –∏ –µ—â–µ {len(projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤"
            
            await self.send_message(channel_id, projects_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            await self.send_error_message(channel_id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    async def start_report_generation(self, channel_id: str, user_id: str):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'step': 'project_selection',
            'channel_id': channel_id
        }
        self._save_user_sessions()
        
        await self.send_message(channel_id, 
            "üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç: `PROJ`\n"
            "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: `PROJ1, PROJ2, PROJ3`\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ `–ø—Ä–æ–µ–∫—Ç—ã` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
        )
    
    async def handle_session_input(self, message: str, channel_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self.user_sessions[user_id]
        step = session['step']
        
        if step == 'project_selection':
            if '–ø—Ä–æ–µ–∫—Ç—ã' in message:
                await self.send_projects_list(channel_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            project_keys = [key.strip().upper() for key in message.split(',')]
            projects = self.jira_client.get_projects()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            selected_projects = []
            invalid_projects = []
            
            for project_key in project_keys:
                project = next((p for p in projects if p['key'] == project_key), None)
                if project:
                    selected_projects.append(project)
                else:
                    invalid_projects.append(project_key)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
            if invalid_projects:
                await self.send_message(channel_id, 
                    f"‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: `{', '.join(invalid_projects)}`\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ `–ø—Ä–æ–µ–∫—Ç—ã` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.")
                return
            
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç
            if not selected_projects:
                await self.send_message(channel_id, 
                    "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ `–ø—Ä–æ–µ–∫—Ç—ã` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.")
                return
            
            session['projects'] = selected_projects
            session['step'] = 'start_date'
            self._save_user_sessions()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
            if len(selected_projects) == 1:
                projects_text = f"**{selected_projects[0]['name']}** ({selected_projects[0]['key']})"
            else:
                projects_list = [f"‚Ä¢ **{p['name']}** ({p['key']})" for p in selected_projects]
                projects_text = f"{len(selected_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤:\n" + "\n".join(projects_list)
            
            await self.send_message(channel_id, 
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {projects_text}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01):"
            )
        
        elif step == 'start_date':
            if not self._validate_date(message):
                await self.send_message(channel_id, 
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)")
                return
            
            session['start_date'] = message.strip()
            session['step'] = 'end_date'
            self._save_user_sessions()
            await self.send_message(channel_id, 
                f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {message}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:"
            )
        
        elif step == 'end_date':
            if not self._validate_date(message):
                await self.send_message(channel_id, 
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
                return
            
            session['end_date'] = message.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            if session['end_date'] < session['start_date']:
                await self.send_message(channel_id, 
                    "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await self.generate_and_send_report(session)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[user_id]
            self._save_user_sessions()
    
    def _validate_date(self, date_str: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
        try:
            datetime.strptime(date_str.strip(), '%Y-%m-%d')
            return True
        except ValueError:
            return False
    
    async def generate_and_send_report(self, session: Dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            channel_id = session['channel_id']
            projects = session['projects']
            start_date = session['start_date']
            end_date = session['end_date']
            
            await self.send_message(channel_id, 
                "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –∏–∑ Jira –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            all_worklogs = []
            project_stats = []
            
            for project in projects:
                project_worklogs = self.jira_client.get_worklogs_for_project(
                    project['key'], start_date, end_date
                )
                
                if project_worklogs:
                    all_worklogs.extend(project_worklogs)
                    project_hours = sum(float(w['hours'].replace(',', '.')) for w in project_worklogs)
                    project_stats.append({
                        'name': project['name'],
                        'key': project['key'],
                        'records': len(project_worklogs),
                        'hours': project_hours
                    })
                    logger.info(f"–ü—Ä–æ–µ–∫—Ç {project['key']}: {len(project_worklogs)} –∑–∞–ø–∏—Å–µ–π, {project_hours:.1f} —á")
            
            if not all_worklogs:
                projects_names = [p['name'] for p in projects]
                await self.send_message(channel_id, 
                    f"üì≠ –¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º **{', '.join(projects_names)}** "
                    f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            all_worklogs.sort(key=lambda x: x['date'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            if len(projects) == 1:
                report_name = projects[0]['name']
            else:
                report_name = f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–∞–º"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            excel_data = self.excel_generator.generate_timesheet_report(
                all_worklogs, report_name, start_date, end_date, projects
            )
            
            filename = self.excel_generator.generate_filename_for_multiple_projects(
                projects, start_date, end_date
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            total_records = len(all_worklogs)
            total_hours = sum(float(w['hours'].replace(',', '.')) for w in all_worklogs)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            stats_text = ""
            if len(projects) > 1:
                stats_text = "\n\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:**\n"
                for stat in project_stats:
                    stats_text += f"‚Ä¢ **{stat['name']}** ({stat['key']}): {stat['records']} –∑–∞–ø–∏—Å–µ–π, {stat['hours']:.1f} —á\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await self.send_file(channel_id, excel_data, filename, 
                f"üìä **–û—Ç—á–µ—Ç –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º –≥–æ—Ç–æ–≤!**\n\n"
                f"**–ü—Ä–æ–µ–∫—Ç—ã:** {', '.join([p['name'] for p in projects])}\n"
                f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_date} –ø–æ {end_date}\n"
                f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {total_records}\n"
                f"**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {total_hours:.1f} —á"
                f"{stats_text}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await self.send_error_message(session['channel_id'], 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    
    async def send_message(self, channel_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_file(self, channel_id: str, file_data: bytes, filename: str, message: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            file_response = self.driver.files.upload_file(
                channel_id=channel_id,
                files={'files': (filename, file_data, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
            )
            
            file_id = file_response['file_infos'][0]['id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message,
                'file_ids': [file_id]
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await self.send_error_message(channel_id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
    
    async def send_error_message(self, channel_id: str, error_msg: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        await self.send_message(channel_id, f"‚ùå **–û—à–∏–±–∫–∞:** {error_msg}")
    
    async def send_unknown_command(self, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        await self.send_message(channel_id, 
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ `–ø–æ–º–æ—â—å` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Mattermost"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
            self._save_user_sessions()
            self.driver.logout()
            logger.info("–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Mattermost")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def _save_user_sessions(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.sessions_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_sessions, f, ensure_ascii=False, indent=2)
            logger.debug(f"–°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.sessions_file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    
    def _load_user_sessions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.sessions_file):
                with open(self.sessions_file, 'r', encoding='utf-8') as f:
                    self.user_sessions = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.user_sessions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            else:
                logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏")
                self.user_sessions = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            self.user_sessions = {}
    
    async def _verify_dm_channels(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DM –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            if not self.user_sessions:
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å {len(self.user_sessions)} DM –∫–∞–Ω–∞–ª–æ–≤")
            
            for user_id, session in self.user_sessions.items():
                channel_id = session.get('channel_id')
                if channel_id:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
                        channel = self.driver.channels.get_channel(channel_id)
                        if channel.get('type') == 'D':
                            logger.debug(f"DM –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            logger.warning(f"–ö–∞–Ω–∞–ª {channel_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DM")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DM –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    def _ensure_dm_channel_access(self, user_id: str, channel_id: str):
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ DM –∫–∞–Ω–∞–ª—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = self.driver.channels.get_channel(channel_id)
            
            if channel.get('type') != 'D':
                logger.warning(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DM –∫–∞–Ω–∞–ª–æ–º")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
            members = self.driver.channels.get_channel_members(channel_id)
            bot_is_member = any(member['user_id'] == self.bot_user['id'] for member in members)
            
            if not bot_is_member:
                logger.warning(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º DM –∫–∞–Ω–∞–ª–∞ {channel_id}")
                # –í DM –∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                return False
            
            logger.debug(f"–î–æ—Å—Ç—É–ø –∫ DM –∫–∞–Ω–∞–ª—É {channel_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {e}")
            return False 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
"""

import asyncio
import logging
import sys
from config import Config
from jira_client import JiraClient
from excel_generator import ExcelGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class MultipleProjectsTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.jira_client = None
        self.excel_generator = None
    
    async def test_multiple_projects_flow(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
        try:
            logger.info("=== –¢–ï–°–¢: –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ ===")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            self.jira_client = JiraClient()
            self.excel_generator = ExcelGenerator()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = self.jira_client.get_projects()
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            
            if len(projects) < 2:
                logger.warning("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ–µ–∫—Ç–∞")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            await self._test_project_parsing()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
            await self._test_multiple_projects_report(projects[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–µ–∫—Ç–∞
            
            logger.info("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            raise
    
    async def _test_project_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        logger.info("--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ ---")
        
        test_cases = [
            "PROJ1",
            "PROJ1, PROJ2",
            "PROJ1, PROJ2, PROJ3",
            " PROJ1 , PROJ2 , PROJ3 ",  # –° –ø—Ä–æ–±–µ–ª–∞–º–∏
            "proj1, proj2",  # –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        ]
        
        for test_input in test_cases:
            logger.info(f"–¢–µ—Å—Ç –≤–≤–æ–¥–∞: '{test_input}'")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –≤ –±–æ—Ç–µ
            project_keys = [key.strip().upper() for key in test_input.split(',')]
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {project_keys}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            projects = self.jira_client.get_projects()
            valid_projects = []
            invalid_projects = []
            
            for project_key in project_keys:
                project = next((p for p in projects if p['key'] == project_key), None)
                if project:
                    valid_projects.append(project)
                else:
                    invalid_projects.append(project_key)
            
            logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(valid_projects)}")
            logger.info(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {invalid_projects}")
            print()
    
    async def _test_multiple_projects_report(self, test_projects):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        logger.info("--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ ---")
        
        if len(test_projects) < 2:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        start_date = "2024-01-01"
        end_date = "2024-01-31"
        
        logger.info(f"–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for project in test_projects:
            logger.info(f"  ‚Ä¢ {project['name']} ({project['key']})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã
        all_worklogs = []
        for project in test_projects:
            worklogs = self.jira_client.get_worklogs_for_project(
                project['key'], start_date, end_date
            )
            if worklogs:
                all_worklogs.extend(worklogs)
                logger.info(f"  {project['key']}: {len(worklogs)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.info(f"  {project['key']}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if not all_worklogs:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç —Å {len(all_worklogs)} –∑–∞–ø–∏—Å—è–º–∏...")
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_worklogs.sort(key=lambda x: x['date'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_name = f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ {len(test_projects)} –ø—Ä–æ–µ–∫—Ç–∞–º"
            excel_data = self.excel_generator.generate_timesheet_report(
                all_worklogs, report_name, start_date, end_date, test_projects
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self.excel_generator.generate_filename_for_multiple_projects(
                test_projects, start_date, end_date
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open(f"test_{filename}", 'wb') as f:
                f.write(excel_data)
            
            logger.info(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_{filename}")
            logger.info(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(excel_data)} –±–∞–π—Ç")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_hours = sum(float(w['hours'].replace(',', '.')) for w in all_worklogs)
            logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.1f} —á")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        tester = MultipleProjectsTester()
        await tester.test_multiple_projects_flow()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–¥–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª") 